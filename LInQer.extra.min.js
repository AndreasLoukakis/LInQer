"use strict";var Linqer;!function(t){t.Enumerable.prototype.shuffle=function(){const t=this;const e=Enumerable.from((function*(){const e=Array.from(t),n=e.length;let r=0;for(;r<n;){let t=r+Math.floor(Math.random()*(n-r));const o=e[t];e[t]=e[r],e[r]=o,r++,yield o}}));return e._count=()=>t.count(),e},t.Enumerable.prototype.randomSample=function(e,n=Number.MAX_SAFE_INTEGER){let r=0;const o=[];if(t._ensureInternalTryGetAt(this),this._canSeek){const t=this.count();let r=0;for(r=0;r<e&&r<n&&r<t;r++)o.push(this.elementAt(r));let a=Math.exp(Math.log(Math.random())/e);for(;r<t&&r<n;)r+=Math.floor(Math.log(Math.random())/Math.log(1-a))+1,r<t&&r<n&&(o[Math.floor(Math.random()*e)]=this.elementAt(r),a*=Math.exp(Math.log(Math.random())/e))}else for(const t of this){if(r<e)o.push(t);else{const n=Math.floor(Math.random()*r);n<e&&(o[n]=t)}if(r++,r>=n)break}return Enumerable.from(o)},t.Enumerable.prototype.distinctByHash=function(t){const e=this;return new Enumerable((function*(){const n=new Set;for(const r of e){const e=n.size;n.add(t(r)),e<n.size&&(yield r)}}))},t.Enumerable.prototype.exceptByHash=function(e,n){t._ensureIterable(e);const r=this;return new Enumerable((function*(){const t=Enumerable.from(e).select(n).toSet();for(const e of r)t.has(n(e))||(yield e)}))},t.Enumerable.prototype.intersectByHash=function(e,n){t._ensureIterable(e);const r=this;return new Enumerable((function*(){const t=Enumerable.from(e).select(n).toSet();for(const e of r)t.has(n(e))&&(yield e)}))},t.OrderedEnumerable.prototype.binarySearch=function(e,n=t._defaultComparer){let r=this;t._ensureInternalTryGetAt(this),this._canSeek||(r=Enumerable.from(Array.from(this)));let o=0,a=r.count()-1;for(;o<=a;){const t=o+a>>1,s=n(r.elementAt(t),e);if(0==s)return t;s<0?o=t+1:a=t-1}return!1}}(Linqer||(Linqer={}));