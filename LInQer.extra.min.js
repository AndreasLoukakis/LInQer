!function(){function t(t){if(!t||!t[Symbol.iterator])throw new Error("the argument must be iterable!")}function n(t,n){return t>n?1:t<n?-1:0}Enumerable.prototype.shuffle=function(){const t=Enumerable.from(function*(){const t=Array.from(this),n=t.length;let e=0;for(;e<n;){let r=e+Math.floor(Math.random()*(n-e));const o=t[r];t[r]=t[e],t[e]=o,e++,yield o}}.bind(this)),n=this;return t._count=()=>n.count(),t},Enumerable.prototype.distinctByHash=function(t){return new Enumerable(function*(){const n=new Set;for(const e of this){const r=n.size;n.add(t(e)),r<n.size&&(yield e)}}.bind(this))},Enumerable.prototype.exceptByHash=function(n,e){t(n);return new Enumerable(function*(){const t=new Enumerable(n).select(e).toSet();for(const n of this)t.has(e(n))||(yield n)}.bind(this))},Enumerable.prototype.intersectByHash=function(n,e){t(n);return new Enumerable(function*(){const t=new Enumerable(n).select(e).toSet();for(const n of this)t.has(e(n))&&(yield n)}.bind(this))},OrderedEnumerable.prototype.binarySearch=function(t,e=n){const r=(o=this)?Array.isArray(o)?o:Array.from(o):[];var o;let i=0,s=r.length-1;for(;i<=s;){const n=i+s>>1,o=e(r[n],t);if(0==o)return n;o<0?i=n+1:s=n-1}return!1}}();