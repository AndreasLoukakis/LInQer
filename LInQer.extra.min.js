"use strict";var Linqer;!function(e){e.Enumerable.prototype.shuffle=function(){const e=this;const t=Enumerable.from((function*(){const t=Array.from(e),n=t.length;let r=0;for(;r<n;){let e=r+Math.floor(Math.random()*(n-r));const o=t[e];t[e]=t[r],t[r]=o,r++,yield o}}));return t._count=()=>e.count(),t},e.Enumerable.prototype.distinctByHash=function(e){const t=this;return new Enumerable((function*(){const n=new Set;for(const r of t){const t=n.size;n.add(e(r)),t<n.size&&(yield r)}}))},e.Enumerable.prototype.exceptByHash=function(t,n){e._ensureIterable(t);const r=this;return new Enumerable((function*(){const e=Enumerable.from(t).select(n).toSet();for(const t of r)e.has(n(t))||(yield t)}))},e.Enumerable.prototype.intersectByHash=function(t,n){e._ensureIterable(t);const r=this;return new Enumerable((function*(){const e=Enumerable.from(t).select(n).toSet();for(const t of r)e.has(n(t))&&(yield t)}))},e.OrderedEnumerable.prototype.binarySearch=function(t,n=e._defaultComparer){let r=this;_ensureInternalTryGetAt(this),this._canSeek||(r=Enumerable.from(Array.from(this)));let o=0,s=r.count()-1;for(;o<=s;){const e=o+s>>1,u=n(r.elementAt(e),t);if(0==u)return e;u<0?o=e+1:s=e-1}return!1}}(Linqer||(Linqer={}));